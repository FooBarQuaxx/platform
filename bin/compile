#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir=$3
buildpack=$(cd "$(dirname $0)/.." && pwd)
arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch
PATH=$buildpack/$plat/bin:$PATH

steptxt="----->"
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m' # No Color
CURL="curl -s -L --retry 15 --retry-delay 2" # retry for up to 30 seconds

DefaultGoVersion="go1.6"
GlideVersion="0.10.2"
TOOL=""
# Default to $SOURCE_VERSION environment variable: https://devcenter.heroku.com/articles/buildpack-api#bin-compile
GO_LINKER_VALUE=${SOURCE_VERSION}

warn() {
    echo -e "${YELLOW} !!    $@${NC}"
}

err() {
    echo -e >&2 "${RED} !!    $@${NC}"
}

step() {
    echo "$steptxt $@"
}

start() {
    echo -n "$steptxt $@... "
}

finished() {
    echo "done"
}

# For older version of Go we need to keep concurrency.sh
needConcurrency() {
  case $1 in
    go1.7*|go1.6*)
      return 1
      ;;
    *)
      return 0
      ;;
  esac
}

handleDefaultPkgSpec() {
  if [ "${pkgs}" = "default" ];
  then
    warn "Installing package '.' (default)"
    warn ""
    case "${TOOL}" in
      glide)
        warn "To install a different package spec for the next build run:"
        warn ""
        warn "'heroku config:set GO_INSTALL_PACKAGE_SPEC=\"<pkg spec>\"'"
        warn ""
        warn "For more details see: https://devcenter.heroku.com/articles/go-dependencies-via-glide"
      ;;
    esac
    warn ""
    pkgs="."
  fi
}

massagePkgSpecForVendor() {
    local t=""
    for pkg in $(echo $pkgs); do
      if [ "${pkg:0:1}" = "." ] || [ ! -d "./vendor/$pkg" ]; then
        t+="${pkg} "
      else
        t+="${name}/vendor/${pkg} "
      fi
    done
    pkgs="${t}"
}

# Go releases have moved to a new URL scheme
# starting with Go version 1.2.2. Return the old
# location for known old versions and the new
# location otherwise.
urlFor() {
    local ver=$1
    case $ver in
    go1.0*|go1.1beta*|go1.1rc*|go1.1|go1.1.*|go1.2beta*|go1.2rc*|go1.2|go1.2.1)
        local file=${GOFILE:-$ver.linux-amd64.tar.gz}
        echo https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/go/$file
        ;;
    devel*)
        local sha=$(echo $ver | cut -d - -f 2)  #assumes devel-<short sha> or devel-<full sha>
        echo https://github.com/golang/go/archive/$sha.tar.gz
    ;;
    *)
        local file=${GOFILE:-$ver.linux-amd64.tar.gz}
        echo https://storage.googleapis.com/golang/$file
        ;;
    esac
}

# Expand to supported versions of Go, (e.g. expand "go1.5" to latest release go1.5.2)
# All specific or other versions, take as is.
expandVer() {
  case $1 in
    go1.7)
      echo "go1.7"
      ;;
    go1.6)
      echo "go1.6.3"
      ;;
    go1.5)
      echo "go1.5.4"
      ;;
    go1.4)
      echo "go1.4.3"
      ;;
    *)
      echo "$1"
      ;;
  esac
}

# Report deprecated versions to user
# Use after expandVer
reportVer() {
  case $1 in
    go1.7|go1.6.3)
      # Noop
    ;;
    devel*)
      warn ""
      warn "You are using a development build of Go."
      warn "This is provided for users requiring an unreleased Go version"
      warn "but is otherwise unsupported."
      warn ""
      warn "Build tests are NOT RUN!!"
      warn ""
    ;;
    *)
      warn ""
      warn "Deprecated or unsupported version of go ($1)"
      warn "See https://devcenter.heroku.com/articles/go-support#go-versions for supported version information."
      warn ""
    ;;
  esac
}

ensureGlide() {
    local gv=${1}
    local gvPath="${cache}/glide/${gv}/bin"
    local gvBin="${gvPath}/glide"

    if test -d "${gvPath}"
    then
        step "Using glide v${gv}"
    else
      rm -rf "${cache}/govendor"
      mkdir -p "${gvPath}"
      start "Installing glide v${gv}"
        $CURL "https://github.com/Masterminds/glide/releases/download/${gv}/glide-${gv}-linux-amd64.tar.gz" | tar -zxf - --strip-components=1 -C ${gvPath}
        chmod a+x ${gvBin}
      finished
    fi

    PATH="${gvPath}:${PATH}"
}

setGoVersionFromEnvironment() {
  if test -z "${GOVERSION}"
  then
    warn ""
    warn "'GOVERSION' isn't set, defaulting to '${DefaultGoVersion}'"
    warn ""
    warn "Run 'heroku config:set GOVERSION=goX.Y' to set the Go version to use"
    warn "for future builds"
    warn ""
  fi
  ver=${GOVERSION:-$DefaultGoVersion}
}

warnGoVersionOverride() {
  if test ! -z "${GOVERSION}"
  then
    warn "Using \$GOVERSION override."
    warn "     \$GOVERSION = ${GOVERSION}"
    warn ""
    warn "If this isn't what you want please run:'"
    warn "  heroku config:unset GOVERSION -a <app>"
    warn ""
  fi
}

warnPackageSpecOverride() {
  if test ! -z "${GO_INSTALL_PACKAGE_SPEC}"
  then
    warn "Using \$GO_INSTALL_PACKAGE_SPEC override."
    warn "     \$GO_INSTALL_PACKAGE_SPEC = ${GO_INSTALL_PACKAGE_SPEC}"
    warn ""
    warn "If this isn't what you want please run:'"
    warn "  heroku config:unset GO_INSTALL_PACKAGE_SPEC -a <app>"
    warn ""
  fi
}


# -----------------------------------------
# load environment variables
# allow apps to specify cgo flags. The literal text '${build_dir}' is substituted for the build directory
if [ ! -z "${env_dir}" ]
then
    mkdir -p "${env_dir}"
    env_dir=$(cd "${env_dir}/" && pwd)
  for key in CGO_CFLAGS CGO_CPPFLAGS CGO_CXXFLAGS CGO_LDFLAGS GO_LINKER_SYMBOL GO_LINKER_VALUE GO15VENDOREXPERIMENT GOVERSION GO_INSTALL_PACKAGE_SPEC
    do
        if [ -f "${env_dir}/${key}" ]
        then
            export "${key}=$(cat "${env_dir}/${key}" | sed -e "s:\${build_dir}:${build}:")"
        fi
    done
fi

glideYAML="${build}/glide.yaml"

if test -f "${glideYAML}"
then
    TOOL="glide"
    setGoVersionFromEnvironment
else
    err "govendor is required. For instructions:"
    err "https://devcenter.heroku.com/articles/go-support"
    exit 1
fi

ver=$(expandVer $ver)
url=${GOURL:-$(urlFor $ver)}

if test -e $build/bin && ! test -d $build/bin
then
    err ""
    err "File bin exists and is not a directory."
    err ""
    exit 1
fi

reportVer $ver

if test -d $cache/$ver/go
then
    step "Using $ver"
else
    rm -rf $cache/* # be sure not to build up cruft
    mkdir -p $cache/$ver
    odir=$(pwd)
    cd $cache/$ver
    start "Installing $ver"
        $CURL $url | tar zxf -
    finished
    case $ver in  # Rename 'go-<full sha>' (we have the short sha) to 'go'
      devel*)
        bver=$(expandVer $DefaultGoVersion)
        burl=$(urlFor $bver)
        start "Installing bootstrap Go version $bver"
            $CURL $burl | tar zxf -
        finished
        mv go bgo
        mv go-$(echo $ver | cut -d - -f 2)* go
        step "Compiling development Go version $ver..."
            cd go/src
            echo "devel +$(echo $ver | cut -d - -f 2) $(date "+%a %b %H:%M:%S %G %z")"> ../VERSION
            GOROOT_BOOTSTRAP=$(pushd $cache/$ver/bgo > /dev/null; pwd; popd > /dev/null) ./make.bash 2>&1
            cd - >/dev/null
            go/bin/go version
        finished
        rm -rf bgo
      ;;
    esac
    cd $odir
fi

mkdir -p $build/bin
export GOROOT="${cache}/${ver}/go"

# If $GO_LINKER_SYMBOL and GO_LINKER_VALUE are set, tell the linker to DTRT
FLAGS=(-tags heroku)
if [ -n "${GO_LINKER_SYMBOL}" -a -n "${GO_LINKER_VALUE}" ]
then
    case $ver in
    go1.5*|go1.6*|go1.7*)
        xval="${GO_LINKER_SYMBOL}=${GO_LINKER_VALUE}"
        ;;
    *)
        xval="${GO_LINKER_SYMBOL} ${GO_LINKER_VALUE}"
        ;;
    esac
    FLAGS=(${FLAGS[@]} -ldflags "-X ${xval}")
fi

# GB installation
case ${TOOL} in
    glide)
        ensureGlide ${GlideVersion}

        export GOBIN="${build}/bin"
        export GOPATH="${build}/.heroku/go"
        PATH="${GOROOT}/bin:${PATH}"

        cd "${build}"
        name=$(glide name 2>/dev/null)
        p="${GOPATH}/src/${name}"
        mkdir -p "${p}"
        cp -R "${build}/"* "${p}"

        pkgs=${GO_INSTALL_PACKAGE_SPEC:-"default"}
        handleDefaultPkgSpec

        unset GIT_DIR
        cd $p

        step "Fetching any unsaved dependencies (glide install)"
        glide install 2>&1

        massagePkgSpecForVendor

        step "Running: go install -v ${FLAGS[@]} ${pkgs}"
        go install -v "${FLAGS[@]}" ${pkgs} 2>&1
    ;;
esac

cd $build
make build-client

if ! test -e $build/Procfile && test -n "${name}"
then
  echo -e "web: $(basename $name)" >> $build/Procfile
fi

rm -rf $build/.heroku

mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/go.sh

if needConcurrency ${ver};
  then
  cp $buildpack/vendor/concurrency.sh $build/.profile.d/
fi

if ! test -e $build/deployed
then
    touch $build/deployed
    echo -e "$HOME/lib/envsubst < $HOME/config/config-heroku-template.json > $HOME/config/config.json" > $build/.profile
fi
